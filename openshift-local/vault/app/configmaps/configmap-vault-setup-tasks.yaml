apiVersion: v1
kind: ConfigMap
metadata:
  name: vault-setup-tasks
  namespace: vault
data:
  main.yaml: |
    ---
    - name: Set vault pod name
      set_fact:
        VAULT_POD: "vault-0"
    - block:
        - name: Initialize vault
          kubernetes.core.k8s_exec:
            namespace: "{{ VAULT_NAMESPACE }}"
            pod: "{{ VAULT_POD }}"
            command: >-
              vault operator init -address http://vault.vault.svc.cluster.local:8200 -ca-path /var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt -format=json -key-shares 1 -key-threshold 1
          register: vault_init
          ignore_errors: true
        - debug:
            var: vault_init
        - name: Get vault init dev secrets
          set_fact:
            VAULT_UNSEAL_KEY: >-
              {{ vault_init.stdout | regex_search('"unseal_keys_b64":\s*\[\s*"([^"]+)"', '\1') | first }}
            VAULT_ROOT_TOKEN: >-
              {{ vault_init.stdout | regex_search('"root_token":\s*"([^"]+)"', '\1') | first }}
          when: not vault_init.failed
      when: VAULT_UNSEAL_KEY is not defined and VAULT_ROOT_TOKEN is not defined or VAULT_UNSEAL_KEY == '' and VAULT_ROOT_TOKEN == ''

    - name: Install vault root secret for dev on OpenShift
      k8s:
        state: present
        name: "vault-init"
        namespace: "{{ VAULT_NAMESPACE }}"
        definition: "{{ lookup('template', 'vault-init-secret.yaml') }}"
        validate_certs: false
      when: VAULT_UNSEAL_KEY is defined and VAULT_ROOT_TOKEN is defined and VAULT_UNSEAL_KEY != '' and VAULT_ROOT_TOKEN != ''

    - name: Get vault init dev secrets
      set_fact:
        VAULT_UNSEAL_KEY: "{{ query('kubernetes.core.k8s', kind='Secret', resource_name='vault-init', namespace=VAULT_NAMESPACE, validate_certs=false)[0].data.VAULT_UNSEAL_KEY | b64decode }}"
        VAULT_ROOT_TOKEN: "{{ query('kubernetes.core.k8s', kind='Secret', resource_name='vault-init', namespace=VAULT_NAMESPACE, validate_certs=false)[0].data.VAULT_ROOT_TOKEN | b64decode }}"
      when: VAULT_UNSEAL_KEY is not defined and VAULT_ROOT_TOKEN is not defined or VAULT_UNSEAL_KEY == '' and VAULT_ROOT_TOKEN == ''

    - block:
        - name: Unseal vault
          kubernetes.core.k8s_exec:
            namespace: "{{ VAULT_NAMESPACE }}"
            pod: "{{ VAULT_POD }}"
            command: >-
              vault operator unseal -address http://vault.vault.svc.cluster.local:8200 -ca-path /var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt "{{ VAULT_UNSEAL_KEY }}"
          register: vault_unseal
          ignore_errors: true
        - debug:
            var: vault_unseal

    - block:
        - name: Write vault admin policy
          kubernetes.core.k8s_exec:
            namespace: "{{ VAULT_NAMESPACE }}"
            pod: "{{ VAULT_POD }}"
            command: >-
              bash -c 'echo '"'"'{{ lookup('template', 'vault-admin-policy.hcl') | default(omit) }}'"'"' | env VAULT_TOKEN="{{ VAULT_ROOT_TOKEN }}" vault policy write -tls-skip-verify vault-admin -'
          register: vault_write_admin_policy
          ignore_errors: true
        - debug:
            var: vault_write_admin_policy

    - block:
        - name: Enable kubernetes vault auth
          kubernetes.core.k8s_exec:
            namespace: "{{ VAULT_NAMESPACE }}"
            pod: "{{ VAULT_POD }}"
            command: >-
              env VAULT_TOKEN="{{ VAULT_ROOT_TOKEN }}" vault auth enable -tls-skip-verify kubernetes
          register: vault_enable_kubernetes_auth
          ignore_errors: true
        - debug:
            var: vault_enable_kubernetes_auth

    - block:
        - name: Write kubernetes auth config
          kubernetes.core.k8s_exec:
            namespace: "{{ VAULT_NAMESPACE }}"
            pod: "{{ VAULT_POD }}"
            command: >-
              env VAULT_TOKEN="{{ VAULT_ROOT_TOKEN }}" vault write -tls-skip-verify auth/kubernetes/config kubernetes_host=https://kubernetes.default.svc:443
          register: vault_write_kubernetes_auth_config
          ignore_errors: true
        - debug:
            var: vault_write_kubernetes_auth_config

    - block:
        - name: Read vault sys/auth
          kubernetes.core.k8s_exec:
            namespace: "{{ VAULT_NAMESPACE }}"
            pod: "{{ VAULT_POD }}"
            command: >-
              env VAULT_TOKEN="{{ VAULT_ROOT_TOKEN }}" vault read -tls-skip-verify -format json sys/auth
          register: vault_read_sys_auth
          ignore_errors: true
        - debug:
            var: vault_read_sys_auth
        - name: Set vault sys/auth
          set_fact:
            VAULT_SYS_AUTH: >-
              {{ vault_read_sys_auth.stdout | from_json }}
        - debug:
            var: VAULT_SYS_AUTH

    - block:
        - name: Write kubernetes admin role
          kubernetes.core.k8s_exec:
            namespace: "{{ VAULT_NAMESPACE }}"
            pod: "{{ VAULT_POD }}"
            command: >-
              env VAULT_TOKEN="{{ VAULT_ROOT_TOKEN }}" vault write -tls-skip-verify auth/kubernetes/role/policy-admin bound_service_account_names=default bound_service_account_namespaces=vault-admin policies=vault-admin ttl=10s
          register: vault_write_kubernetes_admin_role
          ignore_errors: true
        - debug:
            var: vault_write_kubernetes_admin_role

    - block:
        - name: Get vault-admin default token
          set_fact:
            VAULT_ADMIN_DEFAULT_TOKEN: "{{ query('kubernetes.core.k8s', kind='Secret', resource_name='vault-admin-default-token', namespace='vault-admin', validate_certs=false)[0].data.token | b64decode }}"
        - debug:
            var: VAULT_ADMIN_DEFAULT_TOKEN

        - name: Write kubernetes policy-admin login
          kubernetes.core.k8s_exec:
            namespace: "{{ VAULT_NAMESPACE }}"
            pod: "{{ VAULT_POD }}"
            command: >-
              env VAULT_TOKEN="{{ VAULT_ROOT_TOKEN }}" vault write -tls-skip-verify auth/kubernetes/login role=policy-admin jwt={{ VAULT_ADMIN_DEFAULT_TOKEN }}
          register: vault_write_kubernetes_policy_admin_login
          ignore_errors: true
        - debug:
            var: vault_write_kubernetes_policy_admin_login

    - block:
        - name: Write vault kv-engine-admin policy
          kubernetes.core.k8s_exec:
            namespace: "{{ VAULT_NAMESPACE }}"
            pod: "{{ VAULT_POD }}"
            command: >-
              bash -c 'echo '"'"'{{ lookup('template', 'kv-engine-admin-policy.hcl') | regex_replace('\\{\\{', '{{', multiline=True) | regex_replace('\\}\\}', '}}', multiline=True) }}'"'"' | env VAULT_TOKEN="{{ VAULT_ROOT_TOKEN }}" vault policy write -tls-skip-verify kv-engine-admin -'
          register: vault_write_kv_engine_admin_policy
          ignore_errors: true
        - debug:
            var: vault_write_kv_engine_admin_policy

    - block:
        - name: Write vault secret-writer policy
          kubernetes.core.k8s_exec:
            namespace: "{{ VAULT_NAMESPACE }}"
            pod: "{{ VAULT_POD }}"
            command: >-
              bash -c 'echo '"'"'{{ lookup('template', 'secret-writer-policy.hcl') | regex_replace('\\{\\{', '{{', multiline=True) | regex_replace('\\}\\}', '}}', multiline=True) }}'"'"' | env VAULT_TOKEN="{{ VAULT_ROOT_TOKEN }}" vault policy write -tls-skip-verify secret-writer -'
          register: vault_write_secret_writer_policy
          ignore_errors: true
        - debug:
            var: vault_write_secret_writer_policy

    - block:
        - name: Write vault secret-reader policy
          kubernetes.core.k8s_exec:
            namespace: "{{ VAULT_NAMESPACE }}"
            pod: "{{ VAULT_POD }}"
            command: >-
              bash -c 'echo '"'"'{{ lookup('template', 'secret-reader-policy.hcl') | regex_replace('\\{\\{', '{{', multiline=True) | regex_replace('\\}\\}', '}}', multiline=True) }}'"'"' | env VAULT_TOKEN="{{ VAULT_ROOT_TOKEN }}" vault policy write -tls-skip-verify secret-reader -'
          register: vault_write_secret_reader_policy
          ignore_errors: true
        - debug:
            var: vault_write_secret_reader_policy
